# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8
          architecture: x64
      - name: install dependencies and run tests
        run: |
          sudo pip install pipenv
          make build badge
      - uses: EndBug/add-and-commit@v7 # You can change this to use a specific version
        with:
          add: 'badge.svg'
          author_name: CI
          author_email: ci@ci.com
          branch: main
          message: 'updated code coverage badge'
      - uses: EndBug/add-and-commit@v7 # You can change this to use a specific version
        with:
          add: 'docs'
          author_name: CI
          author_email: ci@ci.com
          branch: coverage
          # The local path to the directory where your repository is located. You should use actions/checkout first to set it up
          # Default: '.'
          # cwd: './path/to/the/repo'
          message: 'publish code coverage report github action'
          # The flag used on the pull strategy. Use NO-PULL to avoid the action pulling at all.
          # Default: '--no-rebase'
          # pull_strategy: 'NO-PULL or --no-rebase or --no-ff or --rebase'

          # Whether to push the commit and, if any, its tags to the repo. It can also be used to set the git push arguments (see the paragraph below for more info)
          # Default: true
          # push: false

          # The arguments for the `git rm` command (see the paragraph below for more info)
          # Default: ''
          # remove: './dir/old_file.js'

          # Whether to use the --signoff option on `git commit` (only `true` and `false` are accepted)
          # Default: false
          # signoff: true

          # Arguments for the git tag command (the tag name always needs to be the first word not preceded by an hyphen)
          # Default: ''
          # tag: 'v1.0.0 --force'


